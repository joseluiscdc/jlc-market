plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'org.sonarqube' version '3.0'
}

group = 'com.jlc'
version = '1.1'
sourceCompatibility = '11'

sonarqube {
    properties {
        property 'sonar.projectName', 'Example of SonarQube Scanner for Gradle Usage'
		property 'sonar.projectKey', 'org.sonarqube:gradle-multimodule'
		property 'sonar.sourceEncoding', 'UTF-8'
    }
}

subprojects {
    apply plugin: 'org.sonarqube'
    sonarqube {
        properties {
            //property "sonar.java.libraries", 
   		}
    }
}

repositories {
	mavenCentral()
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
    options.compilerArgs << "-Amapstruct.defaultComponentModel=spring" 
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	implementation 'org.mapstruct:mapstruct:1.3.1.Final'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	runtimeOnly 'org.postgresql:postgresql'
	compile 'com.sun.jersey:jersey-core:1.17.1'
	compile 'com.sun.jersey:jersey-server:1.17.1'
	compile 'com.sun.jersey:jersey-servlet:1.17.1'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}
